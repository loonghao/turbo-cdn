searchState.loadedDescShard("turbo_cdn", 0, "Turbo CDN\nBitbucket downloads\nCloudflare CDN\nRust crates.io\nDetected source type from URL parsing\nDocker Hub\nFastly CDN (jsDelivr)\nGitHub releases\nGitLab releases\nGolang module proxy\njsDelivr CDN\nMaven Central Repository\nnpm registry\nNuGet Gallery\nOther/unknown source\nParsed URL information from various sources\nPython Package Index (PyPI)\nDownload source types\nSourceForge files\nMain TurboCdn client\nBuilder for TurboCdn client\nStatistics for TurboCdn\nAsync API module for external integrations (like vx)\nAverage download speed in bytes per second\nBuild the TurboCdn client\nCreate a new TurboCdn builder\nCache hit rate\nCreate a Cloudflare source\nDownload a file from a repository\nDownload from any supported URL with automatic CDN …\nExtract version from filename using common patterns …\nFailed downloads\nCreate a Fastly source\nFilename\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the optimal CDN URL for a given source URL without …\nGet repository metadata\nGet download statistics\nCreate a GitHub source\nPerform health check on all sources\nInitialize tracing for the library\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a jsDelivr source\nCreate a TurboCdn client with default configuration\nCreate a new builder with default configuration\nOriginal URL\nParse any supported URL into components (public for …\nRepository in format “owner/repo”\nDetected source type\nSuccessful downloads\nTotal bytes downloaded\nTotal downloads\nVersion/tag name\nEnable or disable caching\nSet the configuration\nSet the download directory\nSet maximum concurrent downloads\nSet the region for optimization\nSet the download sources\nAsync wrapper for TurboCdn that provides thread-safe access\nAsync builder for AsyncTurboCdn\nBuild the AsyncTurboCdn client\nDownload a file by repository, version, and filename …\nDownload from any supported URL with automatic …\nExtract version from filename (async version)\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet optimal CDN URL without downloading (async version)\nGet repository metadata (async version)\nGet download statistics (async version)\nPerform health check on all sources (async version)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new AsyncTurboCdn instance\nCreate a new async builder\nParse URL into components (async version)\nConvenience functions for quick async operations\nCreate a new AsyncTurboCdn instance with builder\nEnable or disable caching\nCreate a new AsyncTurboCdn instance with custom …\nSet the configuration\nSet the download directory\nSet maximum concurrent downloads\nSet the region for optimization\nSet the download sources\nQuick repository download\nQuick download from URL with default settings\nQuick URL optimization\nQuick URL parsing\nCache entry metadata\nCache lookup result\nCache manager for downloaded files and metadata\nCache statistics\nMetadata store for cache entries\nPerform cache cleanup\nClear all cache entries\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate cache key for a download\nGet cache statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLook up a file in the cache\nCreate a new cache manager\nRead a file from the cache\nRemove a file from the cache\nStore a file in the cache\nTypes of audit events\nAudit log entry\nAudit logger for compliance tracking\nCompliance checker for ensuring legal and ethical downloads\nCompliance check result\nContent validator for copyright and source verification\nDownload request information for compliance checking\nLicense information\nLicense validator for open source verification\nRisk level assessment\nCheck if a download request is compliant\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog a download event\nCreate a new compliance checker\nAsia Pacific\nCache configuration settings\nChina\nCloudflare source configuration\nCompact format\nCompliance configuration\nCustom source configuration\nData protection configuration\nEurope\nFastly source configuration\nGeneral configuration settings\nGitHub source configuration\nGlobal (auto-detect)\nHuman-readable format\njsDelivr source configuration\nJSON format\nLog format options\nLogging configuration\nMetrics configuration\nNetwork configuration settings\nNorth America\nProxy configuration\nGeographic regions for CDN optimization\nSource configurations\nGlobal configuration for turbo-cdn\nEnable data anonymization\nAPI base URL\nAudit log file path\nEnable audit logging\nBase URL\nBase URL\nBase URL\nBase URL\nCache settings\nCache directory\nCheck copyright status\nChunk size in bytes\nCache cleanup interval in seconds\nCloudflare configuration\nCompliance settings\nEnable compression for cached files\nGet connect timeout as Duration\nConnection timeout in seconds\nEnable console logging\nCustom sources\nData protection settings\nData retention period in days\nEnable debug mode\nDefault region for CDN selection\nDefault download directory\nEnable caching\nEnable GitHub source\nEnable jsDelivr source\nEnable Fastly source\nEnable Cloudflare source\nEnable this source\nEnable metrics collection\nMetrics export interval in seconds\nFastly configuration\nLog file path\nLog format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad configuration from file\nGeneral settings\nGitHub configuration\nCustom headers\nEnable HTTP/2\nEnable HTTP/3 (QUIC)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\njsDelivr configuration\nLog level\nLogging settings\nMaximum number of concurrent chunks per download\nMaximum number of concurrent downloads\nMaximum number of redirects to follow\nMaximum number of retry attempts\nMaximum cache size in bytes\nMetrics settings\nMinimize data collection\nSource name\nNetwork settings\nPassword for proxy authentication\nPriority (lower is higher priority)\nPriority (lower is higher priority)\nPriority (lower is higher priority)\nPriority (lower is higher priority)\nPriority (lower is higher priority)\nProxy settings\nRate limit per hour\nGet read timeout as Duration\nRead timeout in seconds\nGet retry delay as Duration\nRetry delay in milliseconds\nSource configurations\nMetrics storage path\nEnable strict compliance checking\nSave configuration to file\nGitHub API token (optional)\nCache TTL in seconds\nProxy URL\nUser agent string for HTTP requests\nRequire user consent\nUsername for proxy authentication\nValidate configuration\nValidate source legitimacy\nVerify open source licenses\nDownload options\nBuilder for download options\nDownload result\nCore download engine\nCreate a new builder for download options\nChecksum of the downloaded file\nChunk size in bytes\nDownload a file\nDownload duration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the file was served from cache\nGet the optimal CDN URL for a file without downloading\nGet repository metadata from the first available source\nGet download statistics\nCustom headers\nPerform health check on all sources\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of concurrent chunks\nMaximum retry attempts\nCreate a new downloader\nOutput directory\nPath to the downloaded file\nProgress callback\nRetry delay\nFile size in bytes\nSource that was used for download\nAverage download speed in bytes per second\nConnection timeout\nURL that was used for download\nWhether to use cache\nWhether to verify checksums\nAuthentication errors\nCache errors\nChecksum validation errors\nCompliance errors\nConfiguration errors\nDownload errors\nContains the error value\nError context for better error reporting\nFile not found errors\nGeneric errors\nURL parsing errors\nIO-related errors\nJSON parsing errors\nNetwork-related errors\nContains the success value\nRate limiting errors\nResult type alias for turbo-cdn operations\nRouting errors\nSource validation errors\nTimeout errors\nMain error type for turbo-cdn operations\nUnsupported operation errors\nCreate a new authentication error\nCreate a new cache error\nGet the error category for metrics and logging\nCreate a new checksum mismatch error\nCreate a new compliance error\nCreate a new configuration error\nCreate a new download error\nCreate a new file not found error\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new internal error\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the error is retryable\nCreate a new rate limit error\nCreate a new routing error\nCreate a new source validation error\nCreate a new timeout error\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nCreate a new unsupported operation error\nProgress information for a single chunk\nSimple progress reporter that prints to console\nProgress callback type\nProgress information\nProgress tracker for downloads\nAbort the download and clean up\nNumber of active chunks\nMark download as complete\nWhether the download is complete\nMark a chunk as complete\nDownloaded size in bytes\nElapsed time since download started\nEstimated time remaining\nGet a human-readable ETA string\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current progress information\nInitialize chunks for parallel downloading\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new progress tracker\nDownload percentage (0.0 to 100.0)\nGet percentage as a value between 0.0 and 1.0\nSet a progress callback\nGet a human-readable size string\nDownload speed in bytes per second\nGet a human-readable speed string\nGet speed in MB/s\nTotal file size in bytes\nUpdate total progress (for single-threaded downloads)\nUpdate progress for a specific chunk\nCreate a new progress tracker with visual progress bar\nDownload performance result\nPerformance tracking for sources and URLs\nRegion-based optimization\nRouting decision with reasoning\nIntelligent router for selecting optimal download sources\nMetrics for a download source\nMetrics for a specific URL\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet performance statistics\nGet reference to the source manager\nGet source metrics\nGet URL metrics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new smart router\nRecord download performance for learning\nRoute a download request to optimal sources\nUpdate region preference\nChecksum information\nSupported checksum algorithms\nTrait for download sources\nDownload URL with metadata\nFile information\nHealth status of a source\nRepository metadata\nRepository statistics\nSource manager for handling multiple download sources\nAdd a source to the manager\nChecksum algorithm\nCheck if this source can handle the given repository\nExpected checksum (if known)\nFile checksum\nContent type\nRepository description\nAdditional status information\nDownload count (if available)\nGet all enabled sources\nError message if unhealthy\nEstimated latency in milliseconds\nAvailable files for the latest version\nFind sources that can handle a specific repository\nNumber of forks\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet download URLs from all compatible sources\nGet download URLs for a file\nGet metadata for a repository\nTest the availability of this source\nPerform health checks on all sources\nWhether the source is healthy\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this source is enabled\nLast updated timestamp\nLicense information\nAdditional metadata\nGet the name of this source\nRepository name\nFile name\nCreate a new source manager\nNumber of open issues\nGet the priority of this source (lower is higher priority)\nPriority of this URL (lower is higher priority)\nResponse time in milliseconds\nExpected file size in bytes (if known)\nFile size in bytes\nRepository size in KB\nSource that provided this URL\nNumber of stars\nRepository statistics\nWhether this URL supports range requests\nTimestamp of the health check\nThe actual download URL\nRepository URL\nUtility functions for URL manipulation\nChecksum value (hex encoded)\nAvailable versions/tags\nNumber of watchers\nCloudflare CDN source (via cdnjs)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Cloudflare source\nFastly CDN source (via jsDelivr Fastly endpoint)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Fastly source\nGitHub download source\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new GitHub source\njsDelivr CDN source\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new jsDelivr source\nExtract file extension from a file name\nCheck if a file is a binary file based on its extension\nParse a repository string into owner and name\nValidate a URL")